/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package typeracer_game;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author iOSDev747
 */
public class GameServer extends javax.swing.JFrame {
    public static ServerSocket serverSocket;
    public static Socket socket;
    public static DataOutputStream out;
    public static DataInputStream in;
    public static Users[] user;
    private static int port;
    /**
     * Creates new form GameServer
     */
    public GameServer(){
        initComponents();
        user = new Users[100];
        port = 9999;
        try{
            serverSocket = new ServerSocket(port);
            while(true){
                socket = serverSocket.accept();
                for(int i=0;i<100;i++){
                    out = new DataOutputStream(socket.getOutputStream());
                    in = new DataInputStream(socket.getInputStream());
                    if(user[i]==null){
                        user[i]=new Users(out,in,user,i);
                        Thread thread = new Thread(user[i]);
                        thread.start();
                        break;
                    }
                }
            }
        }catch (IOException ex) {
            if(ex.equals("java.lang.NullPointerException")){
                JOptionPane.showMessageDialog(rootPane, "Player Disconnected!!");
            }
            //Logger.getLogger(GameStarter.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverLogLabel = new javax.swing.JLabel();
        logScrollPane = new javax.swing.JScrollPane();
        stopButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serverLogLabel.setText("Server Log");

        stopButton.setText("STOP");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverLogLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 269, Short.MAX_VALUE)
                        .addComponent(stopButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverLogLabel)
                    .addComponent(stopButton))
                .addGap(18, 18, 18)
                .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JLabel serverLogLabel;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}



class Users implements Runnable{
    DataOutputStream out;
    DataInputStream in;
    Users user[] = new Users[100];
    String name;
    int pID;
    public Users(DataOutputStream out, DataInputStream in, Users[] user, int pid){
        this.out = out;
        this.in = in;
        this.user = user;
        this.pID = pid;
    }
    @Override
    public void run(){
        try {
            name = in.readUTF();
            out.writeInt(pID);
            System.out.println(name);
            for(int i=0;i<100;i++){
                if(user[i]!=null){
                    user[i].out.writeUTF(name);
                    user[i].out.writeInt(pID);
                    System.out.println("s12" + name);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Users.class.getName()).log(Level.SEVERE, null, ex);
        }
        while(true){
            try{
                String message = in.readUTF();
                System.out.println("s11:" + message);
                for(int i=0;i<100;i++){
                    if(user[i]!=null){
                        user[i].out.writeUTF(name + "Î©" + message);
                        System.out.println("s12" + name + message);
                    }
                }
            }catch(IOException e){
                user[pID] = null;
            }
        }
    }
    
}